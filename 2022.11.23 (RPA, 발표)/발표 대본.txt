안녕하세요 통계자료 작성 자동화를 발표 할 김영원입니다.

프로젝트 소개인데 시작하기에 전에 이번 프로젝트에서 제가 어떤 점에
중점을 두고 개발했는지 말씀드려고 합니다.
우선 평소랑 가장 달랐던 점은 전부 정해진 개발규칙 내에서 코딩을 해야했던 점입니다.
협업에 있어서 규칙을 정하고 하는것의 필요성은 알고 있었지만 변수명까지 맞추는건 처음이여서
이번 기회에 다른 사람이 봐도 바로 최대한 알아보기 쉽게 
복잡하지않고 단순하고 직관적이게 짜보자. 로 방향을 잡게 되었습니다.

그러면 다시 돌아와서 발표를 해보겠습니다.
프로젝트 소개에서는 목차와 개요를 말씀드리겠습니다.

발표 순서는 프로젝트 개요를 보시고
프로세스가 어떻게 수행하는지에 대한 절차
그리고 결과, 자체 피드백, 마지막으로 시연 영상을 시청하겠습니다.

// 프로젝트 개요는 처음에 받은 업무 메뉴얼에 있는걸로 썻습니다.
4일간 개발을 진행했고. web, excel, mail 시스템을 개발했습니다.

본문인 프로세스 수행에서는 수행 절차와 예외 처리, 그에 따른 결과까지 보시겠습니다.

개발할 때 총 3부분으로 크게 나눠서 했는데 Init, Main, End로 나눴습니다.
구조는 RE FrameWork랑 유사하게 만들어 보려고 했고요.
처음 Init는 실행시 한번만 수행하고 반복 구간이 하나의 트랜잭션처럼
작동 할수 있도록 했습니다. 데이터를 다운받고 필터링후 출력 이 과정을 반복해서
End로 끝내게 만들었습니다.

반복 구간을 좀더 자세히 봐보겠습니다.
파일 다운로드에서는 항목을 선택하고 년도를 선택하고 저장 합니다.

필터링에서는 다운받은 데이터를 필요한 소관만 필터링해서 일반회계와 기타로
나눈 뒤 체크포인트로 쓰기 위해 각각 저장해 두었습니다.

소스 코드는 발표 시간에 맞추기 위해 핵심인 부분만 넣었습니다.
소스 코드에서 감사원, 경찰청 같이 필요한 소관만 필터링합니다.

소관별로 8회 반복하고 row별로 다 더해서 합계를
각각 나눈 DT를 맞는 위치에 저장합니다.

전체적인 구성은 항목별로 8회 반복하고 안에서 년도별로 2회 반복하는 구조입니다.

마지막으로 비고란을 작성합니다.

소관에 해당하는 줄을 다 더해서 0이면 데이터 미존재로 판단합니다.

개발하면서 어떤 예외 처리를 했는지 보겠습니다.

예외 처리에는 delay, Element Exsits, 클릭이나 형식 시뮬레이트를 사용했습니다.
알림창은 검색 클릭 후 Element Exsits 확인하고
파일명이 제대로 저장되지 않기도 해서 형식 시뮬레이트를 썻다가 다시 해제하고
검색이나 다운전 로딩이 나오면 Delay를 사용했습니다.

다른 예외처리는 1분 이상 걸릴 수 있는 다운로드 였는데요.
설정해둔 시간동안 다운을 기다리고 시간을 초과했을 경우 로그를 찍고 다음으로
넘어가도록 만들었습니다. 의미있는 로그를 찍으려고 했습니다.

해당 코드입니다.
시작전 파일 갯수 다운후 파일갯수를 비교
시간 초과시 로그찍고 다음으로

수행결과는 시트별로 나눠서 결과가 출력되는것을 확인했습니다.

자체 평가 의견입니다.
노력했던 점을 먼저 말씀드리면 로그, 주석, 프로젝트명, 변수명인데
이거 그냥 맞춰서 하면 되지 않냐 그럴 수 있는데 지금까지 내가 편한대로 개발했기 때문에
이번에 다른 사람도 생각하기 위해서 로그나 주석은 최대한 의미있는 내용을 간결하게 전달하려고
노력했습니다.

같은 관점에서 프로젝트명과 변수명도 철저히 지키려고 했습니다.
머리로는 알고 있었는데 직접 해보려니 생각보다 익숙지 않아서 개발이 더 오래걸리기도
했던거 같습니다.

이번엔 어려웠던 점을 보겠습니다.
RE FrameWork와 비슷하게 짜려다 보니까 어려웠던거 같습니다.
보통 저는 한꺼번에 다운을받고 다음으로 넘어가는 편이여서
다운에서 끝까지가고 다시 반복하도록 만드는 로직에 대해서 고민을 해야했습니다.

다음 어려웠던 점은 모듈화였습니다.

처음 시작할때는 작년 올해를 한번에 받아서 통합하고 저장하는
식이였는데 통합할 때 복잡해져서 다른 사람이 알아보기 쉽게 짠다는
처음 방향과 맞지 않기도 했고
작년과 올해 데이터를 나눠서 더 단순화 해보려고 코드를 수정했습니다.

외부 파일로 따로 관리한다는 관점은 확실히 이후 유지보수를 할때
좋은 생각인데 이것도 처음해보는거여서 익숙지 않아 힘들었고
데이터 저장에서도 기능은 같지만 조금씩 차이가 나서 고민하다 딕셔너리 형태로
접근을 했습니다. / 나누고 , 으로 나눠서 저장합니다.

개발 규칙과 Config파일에서 맞지 않는 옷을 입은거 같은 어색함이 있었고
로그와 주석은 그냥 달면 되는거 아닌가 했는데 막상 달아보니 구구절절 아니고 간결하게
쓰기가 어려웠고 기초체력이라고 할 수 있는 설계와 모듈화가 중요하구나
나누고 보니 오히려 더 코드가 쉽게 간단해지고 짜기도 편했기 때문에

지금까지 코드를 완성하면 잘 돌아가니까 모듈화를 한다던지 주석이나 로그를 다듬는다 던지
그런건 소홀히 하는 경향이 있었는데 이번 기회에 다시금 중요성을 크게 느낄 수 있는 계기가 되었다
그래서 지금까지 개발자에게 필요한 가장 중요한 역량이 뭐냐고 물어본다면
검색능력 내가 필요한걸 찾고 오류도 검색해서 고칠 수 있는 능력이었는데
이번 프로젝트를 계기로 가장 중요한 역량은 설계와 모듈화로 바뀌게 되었다.

마지막으로 시연 영상 보시겠습니다.

감사합니다.








